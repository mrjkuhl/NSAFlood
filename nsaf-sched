#!/bin/bash
# vim: set ts=2 sw=2 tw=0 et :
#
# Copyright 2014 Joel Cool-Panama <mr.jkuhl@gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

TMPDIR="/tmp/nsaf-sched-$USER"
CRONFILE="/etc/crontab"
CRONFILEBACKUP="/etc/bk.crontab"

VERSION="1.3.0"

printVersion() {
	echo "NSAFlood $VERSION
Copyright 2014 Joel Cool-Panama <mr.jkuhl@gmail.com>
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Joel Cool-Panama and Tracerneo"
}

printUsage() {
  cat <<EOF
Usage:
${0##*/} [options]

Options:
  -H  --host        Host to connect to
  -s  --file-size   Size of garbage file
  -b  --bandwidth   Maximum bandwidth
  -k  --key-file    Path to key files
  -V  --version     Show version and exit
  -h  --help        Show this help and exit

Scheduler Options:
  -m --minute       The minute (1-59)
  -hr --hour        The hour (0-23)
  -D --day          The day of the month (1-31)
  -M --month        The month (1-12)
  -d --week-day     The week day (0-6)
  -l --list         List nsaflood jobs
  -dl --delete      Delete nsaflood job on line
EOF
}

function findLine {
	STRING=$1
	SUBSTRING=$2
	echo "$STRING" | grep -e "$SUBSTRING"
}

function testCriteria {
	scheduleList=$1
	TARGETSCHEDULE=$(findLine "$scheduleList" "--host=$HOST")
	if [ -n $BANDWIDTH ]; then
		TARGETSCHEDULE=$(findLine "$TARGETSCHEDULE" "--bandwidth=$BANDWIDTH ")
	fi

	if [ -n $FILESIZE ]; then
		TARGETSCHEDULE=$(findLine "$TARGETSCHEDULE" "--file-size=$FILESIZE ")
	fi

	if [ -n $KEYFILE ]; then
		TARGETSCHEDULE=$(findLine "$TARGETSCHEDULE" "--key-file=$KEYFILE");
	fi

	if [ -n $MINUTE ]; then
		TARGETSCHEDULE=$(findLine "$TARGETSCHEDULE" "$MINUTE")
	fi

	if [ -n $HOUR ]; then
		TARGETSCHEDULE=$(findLine "$TARGETSCHEDULE" "$HOUR")
	fi

	if [ -n $DAY ]; then
		TARGETSCHEDULE=$(findLine "$TARGETSCHEDULE" "$DAY")
	fi

	if [ -n $MONTH ]; then
		TARGETSCHEDULE=$(findLine "$TARGETSCHEDULE" "$MONTH")
	fi

	if [ -n $WEEKDAY ]; then
		TARGETSCHEDULE=$(findLine "$TARGETSCHEDULE" "$WEEKDAY")
	fi
	echo "$TARGETSCHEDULE"
}

function listSchedule {
	TMP=$(cat $CRONFILE | grep -n "")
	testCriteria "$TMP"
}

function deleteSchedule {
	mkdir $TMPDIR
	CRONFILETMP=$(mktemp --tmpdir=$TMPDIR cronfiletmp.XXXXXXX)

	LINENUM=$1
	TMP=$(cat $CRONFILE | grep -n "")

	TARGETLINE=$(findLine "$TMP" "^$LINENUM:")

	TMP=$(echo "$TMP" | xxd -p | tr -d '\n')
	TARGETLINE=$(echo "$TARGETLINE" | xxd -p | tr -d '\n')

	TMP=$(echo "$TMP" | sed "s/$TARGETLINE//")

	TMP=$(echo "$TMP" | xxd -r -p)

	echo "$TMP" | sed "s/[0-9]*://" > $CRONFILETMP

	echo -ne "nsaflood schedule at line $LINENUM deleted.\n"

	mv $CRONFILETMP $CRONFILE

	rm -r $TMPDIR
}

BANDWIDTH=""
HOST=""
FILESIZE=""
KEYFILE=""

MINUTE=
HOUR=
DAY=""
MONTH=""
WEEKDAY=""
CRONUSER=$USER

if [ $UID != 0 ]; then
	echo -ne " You need to be root to edit the crontab.\n"\
	"Exiting...\n"

	exit 1
fi

if [ ! -f $CRONFILEBACKUP ]; then
	echo -ne "\n No backup of crontab found, creating $CRONFILEBACKUP\n"
	cp $CRONFILE $CRONFILEBACKUP
fi

while [ $1 ]; do
  case $1 in 
    -H | --host)
      HOST=$2
      shift 2
      ;;
    -s | --file-size)
      TMP=$2
      FILESIZE=$((FILESIZE * TMP))
      shift 2
      ;;
    -b | --bandwidth)
      BANDWIDTH=$2
      shift 2
      ;;
    -k | --key-file)
      KEYFILE=$2
      shift 2
      ;;
    -u | --user)
      CRONUSER=$2
      shift 2
      ;;
    -m | --minute)
      MINUTE=$2
      shift 2
      ;;
    -hr | --hour)
      HOUR=$2
      shift 2
      ;;
    -D | --day)
      DAY=$2
      shift 2
      ;;
    -M | --month)
      MONTH=$2
      shift 2
      ;;
    -d | --week-day)
      WEEKDAY=$2
      shift 2
      ;;
    -l | --list)
      listSchedule
      exit 0
      ;;
    -dl | --delete)
      deleteSchedule $2
      exit 0
      ;;
    -V | --version)
      printVersion
      exit 0
      ;;
    -h | --help)
      printUsage
      exit 0
      ;;
    *)
      echo "Unknown option: $1"
      printUsage
      exit 3
      ;;
  esac
done

if [ -z $HOST ]; then
	echo -ne " You must specify a destination user and host\n"\
	"EXAMPLE: nsaf-sched --host=user@remotehost\n"\
	"Exiting...\n"
	exit 2
fi

if [ -z $MINUTE ] && [ -z $HOUR ] && [ -z $DAY ] && [ -z $MONTH ] && [ -z $WEEKDAY ]; then
	echo -ne " ERROR: You must specify at least one time/date variable.\n\n"\
	" EXAMPLE: \"nsaf-sched --file-size=1000 --key-file=~/.ssh/id_rsa --host=anon@ --hour=12\"\n"
	exit 2
fi

NSAFTASK="$CRONUSER /usr/local/bin/nsaflood"
if [ -n $BANDWIDTH ]; then
	NSAFTASK="$NSAFTASK --bandwidth=$BANDWIDTH"
else
	NSAFTASK="$NSAFTASK --bandwidth=2048"
fi

if [ -n $FILESIZE ]; then
	NSAFTASK="$NSAFTASK --file-size=$FILESIZE"
else
	NSAFTASK="$NSAFTASK --file-size=1"
fi

if [ -n $KEYFILE ]; then
	NSAFTASK="$NSAFTASK --key-file=$KEYFILE"
fi

NSAFTASK="$NSAFTASK --host=$HOST"
if [ -n $WEEKDAY ]; then
	NSAFTASK="$WEEKDAY $NSAFTASK"
else
	NSAFTASK="* $NSAFTASK";
fi

if [ -n $MONTH ]; then
	NSAFTASK="$MONTH $NSAFTASK"
else
	NSAFTASK="* $NSAFTASK";
fi

if [ -n $DAY ]; then
	NSAFTASK="$DAY $NSAFTASK"
else
	NSAFTASK="* $NSAFTASK";
fi

if [ -n $HOUR ]; then
	NSAFTASK="$HOUR $NSAFTASK"
else
	NSAFTASK="* $NSAFTASK"
fi

NSAFTASK=" $NSAFTASK"

if [ -n $MINUTE ]; then
	NSAFTASK="$MINUTE $NSAFTASK"
else
	NSAFTASK="* $NSAFTASK"
fi

echo "$NSAFTASK" >> $CRONFILE

rm -r $TMPDIR
