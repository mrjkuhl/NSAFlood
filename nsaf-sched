#
# Copyright 2014 Joel Cool-Panama <mr.jkuhl@gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

#!/bin/bash

TMPDIR="/tmp/nsaf-sched-$USER"
CRONFILE="/etc/crontab"
CRONFILEBACKUP="/etc/bk.crontab"

VERSION="1.3.0"

function isArg {

	firstChar=$(echo "$1" | head -c 2)

	if [ "$firstChar" == "--" ]; then

		return 1
	fi

	firstChar=$(echo "$1" | head -c 1)

	if [ "$firstChar" == "-" ]; then

		return 2

	else

		return 3
	fi
}

function printVersion {

	echo -ne " nsaf-sched $VERSION\n"\
	"Copyright 2014 Joel Cool-Panama <mr.jkuhl@gmail.com>\n"\
	"License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>\n"
}

function findLine {

	STRING=$1
	SUBSTRING=$2

	echo "$STRING" | grep -e "$SUBSTRING"
}

function testCriteria {

	scheduleList=$1

	TARGETSCHEDULE=$(findLine "$scheduleList" "--host=$HOST")

	if [ ! -z $BANDWIDTH ]; then

		TARGETSCHEDULE=$(findLine "$TARGETSCHEDULE" "--bandwidth=$BANDWIDTH ")
	fi

	if [ ! -z $FILESIZE ]; then

		TARGETSCHEDULE=$(findLine "$TARGETSCHEDULE" "--file-size=$FILESIZE ")
	fi

	if [ ! -z $KEYFILE ]; then

		TARGETSCHEDULE=$(findLine "$TARGETSCHEDULE" "--key-file=$KEYFILE");
	fi

	if [ ! -z $MINUTE ]; then

		TARGETSCHEDULE=$(findLine "$TARGETSCHEDULE" "$MINUTE")
	fi

	if [ ! -z $HOUR ]; then

		TARGETSCHEDULE=$(findLine "$TARGETSCHEDULE" "$HOUR")
	fi

	if [ ! -z $DAY ]; then

		TARGETSCHEDULE=$(findLine "$TARGETSCHEDULE" "$DAY")
	fi

	if [ ! -z $MONTH ]; then

		TARGETSCHEDULE=$(findLine "$TARGETSCHEDULE" "$MONTH")
	fi

	if [ ! -z $WEEKDAY ]; then

		TARGETSCHEDULE=$(findLine "$TARGETSCHEDULE" "$WEEKDAY")
	fi

	echo "$TARGETSCHEDULE"
}

function listSchedule {

	TMP=$(cat $CRONFILE | grep -n "")

	testCriteria "$TMP"
}

function deleteSchedule {

	mkdir $TMPDIR
	CRONFILETMP=$(mktemp --tmpdir=$TMPDIR cronfiletmp.XXXXXXX)

	LINENUM=$1
	TMP=$(cat $CRONFILE | grep -n "")

	TARGETLINE=$(findLine "$TMP" "^$LINENUM:")

	TMP=$(echo "$TMP" | xxd -p | tr -d '\n')
	TARGETLINE=$(echo "$TARGETLINE" | xxd -p | tr -d '\n')

	TMP=$(echo "$TMP" | sed "s/$TARGETLINE//")

	TMP=$(echo "$TMP" | xxd -r -p)

	echo "$TMP" | sed "s/[0-9]*://" > $CRONFILETMP

	echo -ne "nsaflood schedule at line $LINENUM deleted.\n"

	mv $CRONFILETMP $CRONFILE

	rm -r $TMPDIR
}

BANDWIDTH=""
HOST=""
FILESIZE=""
KEYFILE=""

MINUTE=""
HOUR=""
DAY=""
MONTH=""
WEEKDAY=""
CRONUSER=$USER

if [ $USER != "root" ]; then

	echo -ne " You need to be root to edit the crontab.\n"\
	" Exiting...\n"

	exit 1
fi

if [ ! -f $CRONFILEBACKUP ]; then

	echo -ne "\n No backup of crontab found, creating $CRONFILEBACKUP\n"

	cp $CRONFILE $CRONFILEBACKUP
fi

while [ $1 ]; do

	isArg "$1"
	isArgReturn=$?

	if [ $isArgReturn -eq 1 ]; then

		if [ "$1" == "--host" ]; then

			HOST="$2"

			shift

		elif [ "$1" == "--file-size" ]; then

			FILESIZE="$2"

			shift

		elif [ "$1" == "--bandwidth" ]; then

			BANDWIDTH="$2"

			shift

		elif [ "$1" == "--key-file" ]; then

			KEYFILE="$2"

			shift

		elif [ "$1" == "--user" ]; then

			USER="$2"

			shift

		elif [ "$1" == "--minute" ]; then

			MINUTE="$2"

			shift

		elif [ "$1" == "--hour" ]; then

			HOUR="$2"

			shift

		elif [ "$1" == "--day" ]; then

			DAY="$2"

			shift

		elif [ "$1" == "--month" ]; then

			MONTH="$2"

			shift

		elif [ "$1" == "--week-day" ]; then

			WEEKDAY="$2"

			shift

		elif [ "$1" == "--list" ]; then

			listSchedule

			exit 0

		elif [ "$1" == "--delete" ]; then

			deleteSchedule "$2"

			exit 0

		elif [ "$1" == "--version" ]; then

			printVersion

			exit 0
		else

			echo "No such argument exists"

			exit 3
		fi

	elif [ $isArgReturn -eq 2 ]; then

		if [ "$1" == "-ht" ]; then

			HOST="$2"

			shift

		elif [ "$1" == "-s" ]; then

			FILESIZE="$2"

			shift

		elif [ "$1" == "-b" ]; then

			BANDWIDTH="$2"

			shift

		elif [ "$1" == "-k" ]; then

			KEYFILE="$2"

			shift

		elif [ "$1" == "-u" ]; then

			USER="$2"

			shift

		elif [ "$1" == "-mi" ]; then

			MINUTE="$2"

			shift

		elif [ "$1" == "-hr" ]; then

			HOUR="$2"

			shift

		elif [ "$1" == "-dy" ]; then

			DAY="$2"

			shift

		elif [ "$1" == "-mo" ]; then

			MONTH="$2"

			shift

		elif [ "$1" == "-wd" ]; then

			WEEKDAY="$2"

			shift

		elif [ "$1" == "-l" ]; then

			listSchedule

			exit 0

		elif [ "$1" == "-dl" ]; then

			deleteSchedule "$2"

			exit 0

		elif [ "$1" == "-V" ]; then

			printVersion

			exit 0
		else 

			echo "No such argument exists"

			exit 3
		fi
	else

			echo ""
	fi

	shift
done

if [ -z $HOST ]; then

	echo -ne " You must specify a destination user and host\n"\
	"EXAMPLE: nsaf-sched --host=user@remotehost\n"\
	"Exiting...\n"

	exit 2
fi

if [ -z $MINUTE ] && [ -z $HOUR ] && [ -z $DAY ] && [ -z $MONTH ] && [ -z $WEEKDAY ]; then

	echo -ne " ERROR: You must specify at least one time/date variable.\n\n"\
	" EXAMPLE: \"nsaf-sched --file-size=1000 --key-file=~/.ssh/id_rsa --host=anon@ --hour=12\"\n"

	exit 2
fi

NSAFTASK="$CRONUSER /usr/local/bin/nsaflood"

if [ ! -z $BANDWIDTH ]; then

	NSAFTASK="$NSAFTASK --bandwidth=$BANDWIDTH"
else

	NSAFTASK="$NSAFTASK --bandwidth=2048"
fi

if [ ! -z $FILESIZE ]; then

	NSAFTASK="$NSAFTASK --file-size=$FILESIZE"
else

	NSAFTASK="$NSAFTASK --file-size=1"
fi

if [ ! -z $KEYFILE ]; then

	NSAFTASK="$NSAFTASK --key-file=$KEYFILE"
fi

NSAFTASK="$NSAFTASK --host=$HOST"

if [ ! -z $WEEKDAY ]; then

	NSAFTASK="$WEEKDAY $NSAFTASK"

else

	NSAFTASK="* $NSAFTASK";
fi

if [ ! -z $MONTH ]; then

	NSAFTASK="$MONTH $NSAFTASK"

else

	NSAFTASK="* $NSAFTASK";
fi

if [ ! -z $DAY ]; then

	NSAFTASK="$DAY $NSAFTASK"

else

	NSAFTASK="* $NSAFTASK";
fi

if [ ! -z $HOUR ]; then

	NSAFTASK="$HOUR $NSAFTASK"

else

	NSAFTASK="* $NSAFTASK"
fi

NSAFTASK=" $NSAFTASK"

if [ ! -z $MINUTE ]; then

	NSAFTASK="$MINUTE $NSAFTASK"

else

	NSAFTASK="* $NSAFTASK"
fi

echo "$NSAFTASK" >> $CRONFILE

rm -r $TMPDIR
