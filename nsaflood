#!/usr/bin/env python
#
# Copyright 2014 Joel Cool-Panama <mr.jkuhl@gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import os
import random
import subprocess
import socket
import argparse
import linecache
import ConfigParser
import time

defaultTTL=8;
defaultKeyfileSize=256;

def selectPeer(unreachableHosts=[]):

	peersCount = subprocess.Popen(["wc", "-l", "/etc/nsaflood/peertab"], stdout=subprocess.PIPE).communicate()[0];
	peersCount = peersCount.split(" ")[0];

	maxPeerFindAttempts = 50;
	peerFindAttempts = 0;

	while True:
		selectedHost = linecache.getline('/etc/nsaflood/peertab', random.randrange(1, int(peersCount) + 1)).splitlines()[0];

		for host in unreachableHosts:

			if selectedHost == host:

				selectedHost = None;

		if selectedHost != None:

			break;

		peerFindAttempts += 1;

		if peerFindAttempts == maxPeerFindAttempts:

			return 1;

	return selectedHost;

def getConnection(host):

	global server;

	connectAttempts = 0;
	unreachableHosts = [];

	while True:

		try:

			server.connect((host, port));

			break;

		except socket.error:

			connectAttempts += 1;

			if connectAttempts == maxConnectAttempts:

				print "nsaflood: failed to connect to a host " + str(maxConnectAttempts) + " times.";
				print "nsaflood: Now exiting.";

				os.remove(garbagefile);

				return 1;

			print "nsaflood: Connection to " + host + " timed out.";

			unreachableHosts.append(host);
			host = selectPeer(unreachableHosts);

			if host.isdigit():

				print "nsaflood: selectPeer() failed to find a new peer.";
				print "nsaflood: Now exiting."

				os.remove(garbagefile);

				return 1;

			print "nsaflood: " + host + " selected.";

	return host;

def printServerOutput(message):

	print time.strftime("%H:%M:%S") + " nsaflood server: " + message + ".";

	return;

def varyGarbagefileSize(garbagefileSize, fileSizeVariance):

	return random.randrange(1, int(int(garbagefileSize) * float(fileSizeVariance) + 1));

def createFile(fileName, fileSize=0):

	fileName = subprocess.Popen(["mktemp", "--tmpdir", "nsaflood-" + fileName + ".XXXX"], stdout=subprocess.PIPE);
	fileName = fileName.communicate()[0].splitlines()[0];

	file = open(fileName, 'w');

	file.write(os.urandom(fileSize));
	file.close();

	return fileName;

def createGarbagefile():

	if args.file_size:

		garbagefileSize = int(args.file_size) * 1024 * 1024;

	else:

		garbagefileSize = 1024 * 1024;

	if args.file == None:

		garbagefileSize += varyGarbagefileSize(garbagefileSize, 0.09);
		garbagefile = createFile("garbagefile", garbagefileSize);

	if args.file:

		fileSize = subprocess.Popen(["wc", "-c", args.file], stdout=subprocess.PIPE).communicate()[0];
		fileSize = fileSize.split(" ")[0];

		garbagefileSize += varyGarbagefileSize(garbagefileSize, 0.1);
		garbagefileSize = garbagefileSize - int(fileSize);

		garbagefileFiller = createFile("garbagefile", garbagefileSize);
		garbagefile = createFile("garbagefile");

		subprocess.call(["tar", "-cf", garbagefile, args.file, garbagefileFiller]);

		os.remove(garbagefileFiller);

		garbagefileTTL = 9;

	print "nsaflood: Garbagefile " + garbagefile + " created.";

	return garbagefile;

def stepTTL():

	if args.ttl == None and args.file == None:

		ttl = defaultTTL;

	elif args.ttl == None:

		ttl = 9;

	elif args.ttl > 0:

		ttl = int(args.ttl) - 1;

	print "nsaflood: TTL set to " + str(ttl) + ".";

	return ttl;

def encryptFile(file, key, fileName):

	newFile = createFile(fileName);

	subprocess.call(["openssl", "enc", "-aes-256-cbc", "-salt", "-in", file, "-out", newFile, "-pass", "file:" + key]);

	os.remove(file);

	return newFile;

def decryptFile(file, key, fileName):

	newFile = createFile(fileName);

	subprocess.call(["openssl", "enc", "-d", "-aes-256-cbc", "-in", file, "-out", newFile, "-pass", "file:" + key]);

	os.remove(file);

	return newFile;

def rsaEncryptFile(file, pubKey, fileName):

	newFile = createFile(fileName);

	subprocess.call(["openssl", "rsautl", "-encrypt", "-inkey", pubKey, "-pubin", "-in", file, "-out", newFile]);
	
	os.remove(file);

	return newFile;

def rsaDecryptFile(file, prvKey, fileName):

	newFile = createFile(fileName);

	subprocess.call(["openssl", "rsautl", "-decrypt", "-inkey", prvKey, "-in", file, "-out", newFile]);

	os.remove(file);

	return newFile;

def readFileChunks(file, fileChunkSize=1024):

	filePointer = open(file, "r");

	while True:

		data = filePointer.read(fileChunkSize);

		if not data:

			break;

		yield data;

def readFile(file):

	fileContents = "";

	for data in readFileChunks(file, 1024):

		fileContents += data;

	return fileContents;

def sendFile(file, connectionsSent, startTime):

	global server;

	print "nsaflood: Sending " + file + ".";

	for data in readFileChunks(file, 1024):

		while True:

			connectionsSent, startTime = limitBandwidth(connectionsSent, startTime);

			if connectionsSent < bandwidthLimit:

				server.send(data);
				connectionsSent += 1;
				break;

	print "nsaflood: File sent.";

	return connectionsSent, startTime;

def receiveFile(file, connectionsReceived, startTime, connection, excessData=""):

	filePointer = open(file, "a");
	filePointer.write(excessData);

	printServerOutput("Downloading file " + file);

	while True:

		connectionsReceived, startTime = limitBandwidth(connectionsReceived, startTime);

		if connectionsReceived < bandwidthLimit:

			data = connection.recv(1024);
			connectionsReceived += 1;

			if fileDelimiter in data:

				data = data.split(fileDelimiter);
				excessData = data[1];

				filePointer.write(data[0]);
				filePointer.close();
				break;

			filePointer.write(data);

	printServerOutput("End of file message received");

	return connectionsReceived, startTime, excessData;

# Limit bandwidth usage to user defined maximum
def limitBandwidth(connections, startTime):

	if time.time() >= startTime + 1:

		connections = 0;
		startTime = time.time();

	elif connections >= bandwidthLimit:

		time.sleep(0.05);

	return connections, startTime;

def writeFiles(connection, address):

	garbagefile = createFile("garbagefile");
	garbagekey = createFile("garbagekey");
	ttlFile = createFile("ttlfile");

	connectionsReceived = 0;
	startTime = time.time();

	connectionsReceived, startTime, excessData = receiveFile(ttlFile, connectionsReceived, startTime, connection);
	connectionsReceived, startTime, excessData = receiveFile(garbagefile, connectionsReceived, startTime, connection, excessData);
	connectionsReceived, startTime, excessData = receiveFile(garbagekey, connectionsReceived, startTime, connection, excessData);

	garbagekey = rsaDecryptFile(garbagekey, "/etc/nsaflood/privatekey", "garbagekey");
	garbagefile = decryptFile(garbagefile, garbagekey, "garbagefile");
	ttlFile = decryptFile(ttlFile, garbagekey, "ttlfile");

	garbagefileTTL = int(readFile(ttlFile));

	if (garbagefileTTL <= 8):

		subprocess.call(["nsaflood", "--garbage-file", garbagefile, "--ttl", str(garbagefileTTL)]);

	elif (garbagefileTTL == 9):

		subprocess.call(["tar", "-xf", garbagefile]);

		printServerOutput("Garbagefile was hidden file");

		garbagefile = encryptFile(garbagefile, garbagekey, "garbagefile");

		subprocess.call(["nsaflood", "--garbage-file", garbagefile, "--ttl", str(defaultTTL)]);

	os.remove(ttlFile);
	os.remove(garbagekey);

	return;

def startServer():

	global bandwidthLimit;
	bandwidthLimit = int(confParse.get('server', 'DEFAULTBANDWIDTH')) / 8;

	host = socket.gethostname();

	global server;

	server.bind((host, port));
	server.listen(5);

	while True:

		connection, address = server.accept();

		writeFiles(connection, address);

def main():

	global bandwidthLimit;

	if args.host:

		host = args.host;

		print "nsaflood: Provided host is " + host + ".";

	else:
		print "nsaflood: Selecting host at random from peertab.";

		host = selectPeer();

		print "nsaflood: " + host + " selected.";

	if args.bandwidth:

		bandwidthLimit = int(args.bandwidth) / 8;

	else:

		bandwidthLimit = int(confParse.get('client', 'DEFAULTBANDWIDTH')) / 8;

	if args.garbage_file:

		garbagefile = args.garbage_file;

		print "nsaflood: Garbagefile " + garbagefile + " provided";

	else:

		garbagefile = createGarbagefile();

	garbagefileTTL = stepTTL();

	if garbagefileTTL == 0:

		print "nsaflood: The TTL of " + garbagefile + " is 0.";
		print "nsaflood: The garbagefile will be deleted.";

		os.remove(garbagefile);

		return 0;

	host = getConnection(host);

	publickey = "/etc/nsaflood/pubkeys/" + host;
	garbagekey = createFile("garbagekey", defaultKeyfileSize);
	ttlFile = createFile("ttlfile");

	ttlFilePointer = open(ttlFile, 'w');
	ttlFilePointer.write(str(garbagefileTTL));
	ttlFilePointer.close();

	ttlFile = encryptFile(ttlFile, garbagekey, "ttlfile");
	garbagefile = encryptFile(garbagefile, garbagekey, "garbagefile");
	garbagekey = rsaEncryptFile(garbagekey, publickey, "garbagekey");

	connectionsSent = 0;
	startTime = time.time();

	connectionsSent, startTime = sendFile(ttlFile, connectionsSent, startTime);

	time.sleep(1);

	server.send(fileDelimiter);

	time.sleep(1);

	connectionsSent, startTime = sendFile(garbagefile, connectionsSent, startTime);

	time.sleep(1);

	server.send(fileDelimiter);

	time.sleep(1);

	connectionsSent, startTime = sendFile(garbagekey, connectionsSent, startTime);

	time.sleep(1);

	server.send(fileDelimiter);

	print "Finished file transfer.";

	server.close();

	os.remove(ttlFile);
	os.remove(garbagefile);
	os.remove(garbagekey);

if __name__ == "__main__":

	confFile = r'/etc/nsaflood/nsaflood.conf';

	confParse = ConfigParser.RawConfigParser();
	confParse.read(confFile);

	bandwidthLimit = 0;
	fileDelimiter = "NSAFLOOD\r\n\r\nFILE TRANSFER";
	maxConnectAttempts = int(confParse.get('client', 'DEFAULTCONNECTATTEMPTS')) / 8;
	port = 17666;
	server = socket.socket();

	parser = argparse.ArgumentParser();

	parser.add_argument("-S", "--start-server", help="Start the listening server", action="store_true");
	parser.add_argument("-f", "--file", help="File to be transfered hidden as a garbagefile.");
	parser.add_argument("-H", "--host", help="The destination host");
	parser.add_argument("-s", "--file-size", help="Size of the file to be generated in MiB");
	parser.add_argument("-b", "--bandwidth", help="Upload speed limit in Kib");
	parser.add_argument("-g", "--garbage-file", help="The file to be sent to the recipient.");
	parser.add_argument("-t", "--ttl", help="The time-to-live of the garbagefile");
	parser.add_argument("--version", help="Display version and copyright information", action="store_true");

	args = parser.parse_args();

	if args.start_server:

		startServer();

	elif args.version:

		print "poop";

	else:

		main();

