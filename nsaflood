#!/bin/bash
#  vim: set ts=2 sw=2 tw=0 et :
#
# Copyright 2014 Joel Cool-Panama <mr.jkuhl@gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

CONFIGFILE="/etc/nsaflood/nsaflood.conf"

. $CONFIGFILE

printVersion() {
	echo "NSAFlood $VERSION
Copyright 2014 Joel Cool-Panama <mr.jkuhl@gmail.com>
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Joel Cool-Panama and Tracerneo"
}

printUsage() {
  cat <<EOF
Usage:
${0##*/} [options]

Options:
  -H  --host        Host to connect to
  -s  --file-size   Size of garbage file
  -b  --bandwidth   Maximum bandwidth
  -k  --key-file    Path to key files
  -V  --version     Show version and exit
  -h  --help        Show this help and exit
EOF
}

function printLog() {
	LOGMESSAGE="$@"
	if echo "`date '+%T'` $LOGMESSAGE" >> $LOGFILE
	then
		return 0
	else
		echo "`date '+%Y%m%d'` Cannot write to log file, please check file permissions. NSAFlood will now exit."
		exit 1
	fi
}

function selectPeer() {
	PEERLIST=$(cat $PEERTAB | grep -n "")
	LINECOUNT=$(echo "$PEERLIST" | wc -l)
	RAND=$(($RANDOM % LINECOUNT + 1))
	SELECTEDPEER=$(echo "$PEERLIST" | grep -e "$RAND")
	echo $SELECTEDPEER | echo ${SELECTEDPEER#*:} | sed "s/\s.*//"
}

function deleteGarbagefile() {
	GFILE=$1
	if rm $GFILE > /dev/null 2>&1
	then
		printLog "$GFILE successfully deleted."
	else
		printLog "ERROR: could not delete $GFILE, please check file permissions."
	fi
}

BANDWIDTH=2048
HOST=
FILESIZE=1024
GARBAGEFILE=
KEYFILE=

TMP=""

while [ $1 ]; do
  case $1 in 
    -H | --host)
      HOST=$2
      shift 2
      ;;
    -s | --file-size)
      TMP=$2
      FILESIZE=$((FILESIZE * TMP))
      shift 2
      ;;
    -b | --bandwidth)
      BANDWIDTH=$2
      shift 2
      ;;
    -k | --key-file)
      KEYFILE=$2
      shift 2
      ;;
    -g | --garbage-file)
      GARBAGEFILE=$2
      shift 2
      ;;
    -t | --ttl)
      TTL=$2
      shift 2
      ;;
    -V | --version)
      printVersion
      exit 0
      ;;
    -h | --help)
      printUsage
      exit 0
      ;;
    *)
      echo "Unknown option: $1"
      printUsage
      exit 3
      ;;
  esac
done

if [ ! -z $TTL ] && [ $TTL == 0 ]
then
	printLog "TTL of $GARBAGEFILE is 0, file will not be propogated further."
	deleteGarbagefile $GARBAGEFILE
	exit 0
elif [ ! -z $TTL ]
then
	TTL=$((TTL - 1))
	printLog "TTL decremented to $TTL"
else
	TTL=$DEFAULTTTL
fi

if [ -z $KEYFILE ] && ls $DEFAULTKEYFILE
then
	printLog "KEYFILE not specified, using DEFEAULTKEYFILE"
	KEYFILE=$DEFAULTKEYFILE
elif [ -z $KEYFILE ]
then
	printLog "Error: No KEYFILE specified, and DEFAULTKEYFILE not found or specified"
	exit 2
fi

if [ -z $GARBAGEFILE ]; then
	if GARBAGEFILE=$(mktemp --tmpdir nsaflood-garbagefile.XXXX)
	then
		printLog "Garbagefile created at $GARBAGEFILE"
	else
		printLog "Error: Could not create garbagefile."
		exit 4
	fi

	if dd if=/dev/urandom of=$GARBAGEFILE bs=1k count=$FILESIZE 2> /dev/null
	then
		printLog "Random data for garbagefile $GARBAGEFILE generated successfully."
	else
		printLog "Could not generate random data for garbagefile $GARBAGEFILE."
		exit 4
	fi
else
	printLog "Garbagefile $GARBAGEFILE found."
fi

count=0
while [ $count -lt 5 ]
do
	count=$((count + 1))
	if [ -z $HOST ]
	then
	HOST=$(selectPeer)
	printLog "Peer $HOST selected from peertab."
	else
	printLog "User supplied $HOST as target peer."
	fi

	if scp -l $BANDWIDTH -i $KEYFILE $GARBAGEFILE $HOST:$GARBAGEFILE
	then
	ssh -i $KEYFILE $HOST nsaflood --garbage-file $GARBAGEFILE --ttl $TTL &
	printLog "Garbagefile $GARBAGEFILE successfully transfered to peer $HOST."
	break

	else
	printLog "Error: Could not transfer garbagefile $GARBAGEFILE to peer $HOST, selecting new peer from peertab."
	HOST=
	exit 5
	fi
done

deleteGarbagefile $GARBAGEFILE

exit 0
