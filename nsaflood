#!/bin/bash
#  vim: set ts=2 sw=2 tw=0 et :
#
# Copyright 2014 Joel Cool-Panama <mr.jkuhl@gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

VERSION="1.3.0"

printVersion() {
	echo "NSAFlood $VERSION
Copyright 2014 Joel Cool-Panama <mr.jkuhl@gmail.com>
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Joel Cool-Panama and Tracerneo"
}

printUsage() {
  cat <<EOF
Usage:
${0##*/} [options]

Options:
  -H  --host        Host to connect to
  -s  --file-size   Size of garbage file
  -b  --bandwidth   Maximum bandwidth
  -k  --key-file    Path to key files
  -V  --version     Show version and exit
  -h  --help        Show this help and exit
EOF
}

BANDWIDTH="2048"
HOST=""
FILESIZE=1024
GARBAGEFILE=""
KEYFILE=""

TMP=""

while [ $1 ]; do
  case $1 in 
    -H | --host)
      HOST=$2
      shift 2
      ;;
    -s | --file-size)
      TMP=$2
      FILESIZE=$((FILESIZE * TMP))
      shift 2
      ;;
    -b | --bandwidth)
      BANDWIDTH=$2
      shift 2
      ;;
    -k | --key-file)
      KEYFILE=$2
      shift 2
      ;;
    -V | --version)
      printVersion
      exit 0
      ;;
    -h | --help)
      printUsage
      exit 0
      ;;
    *)
      echo "Unknown option: $1"
      printUsage
      exit 2
      ;;
  esac
done

if [ -z $HOST ]; then

	echo "FAILURE: not enough arguments.
REASON: --host not specified.
Exiting"

	exit 1
fi

GARBAGEFILE=$(mktemp --tmpdir nsaflood-garbagefile.XXXX)

echo "Generating file..."
dd if=/dev/urandom of=$GARBAGEFILE bs=1k count=$FILESIZE 2> /dev/null

if [ $? -ne 0 ]; then
	echo "FAILURE: File generation failed.
REASON: dd failed to read from /dev/urandom.
Exiting"
	exit 3
fi

echo -e "File generated!
Transferring garbage file to $HOST\n"

if [ ! -z "$KEYFILE" ]; then
	scp -l $BANDWIDTH -i $KEYFILE $GARBAGEFILE "$HOST:/dev/null"
else
	scp -l $BANDWIDTH $GARBAGEFILE "$HOST:/dev/null"
fi

if [ $? -ne 0 ]; then
	echo "FAILURE: File transfer failed.
REASON: scp failed to transfer the file.
Exiting"
	exit 4
fi

rm "$GARBAGEFILE"

exit 0
